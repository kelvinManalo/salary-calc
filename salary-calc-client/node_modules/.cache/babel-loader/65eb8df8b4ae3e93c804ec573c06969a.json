{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\ReactJS\\\\salary-calc\\\\salary-calc-client\\\\src\\\\Components\\\\Employee\\\\EmployeeAdd.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  DOM: {\n    input,\n    select,\n    textarea\n  }\n} = React;\n\nclass EmployeeAdd extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta,\n      placeholder\n    }) => {\n      const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          placeholder: placeholder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderRadio = ({\n      input,\n      meta,\n      description,\n      type,\n      ...rest\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: type,\n          ...input,\n          className: \"hidden\",\n          checked: input.value === rest.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.birthDateMasking = (val, prevVal) => {\n      // Prevent non-digit characters being entered\n      if (isNaN(parseInt(val[val.length - 1], 10))) {\n        return val.slice(0, -1);\n      } // When user is deleting, this prevents immediate re-addition of '/' when it's deleted\n\n\n      if (prevVal && prevVal.length >= val.length) {\n        return val;\n      } // Add / at appropriate sections of the input\n\n\n      if (val.length === 2 || val.length === 5) {\n        val += \"/\";\n      } // Prevent characters being entered after Dob is full\n\n\n      if (val.length >= 10) {\n        return val.slice(0, 10);\n      }\n\n      return val;\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ui form error\",\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"firstName\",\n        component: this.renderInput,\n        label: \"First Name\",\n        placeholder: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"middleName\",\n        component: this.renderInput,\n        label: \"Middle Name\",\n        placeholder: \"Middle Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"lastName\",\n        component: this.renderInput,\n        label: \"Last Name\",\n        placeholder: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"two fields\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"eleven wide field\",\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"birthDate\",\n            component: this.renderInput,\n            label: \"Birth Date\",\n            placeholder: \"MM/DD/YYYY\",\n            normalize: this.birthDateMasking\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"five wide field\",\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"tin\",\n            component: this.renderInput,\n            label: \"TIN\",\n            placeholder: \"TIN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline fields\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Employmee Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"employeeType\",\n          component: \"input\",\n          type: \"radio\",\n          value: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Contractual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"employeeType\",\n          component: \"input\",\n          type: \"radio\",\n          value: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Regular\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.firstName) {\n    errors.firstName = \"You must enter a first name\";\n  }\n\n  if (!formValues.lastName) {\n    errors.lastName = \"You must enter a last name\";\n  }\n\n  if (!formValues.middleName) {\n    errors.middleName = \"You must enter a middle name\";\n  }\n\n  const validDate = formValues.birthDate instanceof Date && !isNaN(formValues.birthDate.valueOf());\n\n  if (validDate) {\n    if (new Date(formValues.birthDate) > new Date()) {\n      errors.birthDate = \"Birth date cannot be future dated\";\n    }\n  } else {\n    errors.birthDate = \"You must enter a valid date\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"EmployeeAdd\",\n  validate\n})(EmployeeAdd);","map":{"version":3,"sources":["C:/Projects/ReactJS/salary-calc/salary-calc-client/src/Components/Employee/EmployeeAdd.js"],"names":["React","Field","reduxForm","DOM","input","select","textarea","EmployeeAdd","Component","renderInput","label","meta","placeholder","className","error","touched","renderError","renderRadio","description","type","rest","value","birthDateMasking","val","prevVal","isNaN","parseInt","length","slice","render","validate","formValues","errors","firstName","lastName","middleName","validDate","birthDate","Date","valueOf","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nconst {\r\n  DOM: { input, select, textarea },\r\n} = React;\r\n\r\nclass EmployeeAdd extends React.Component {\r\n  renderError({ error, touched }) {\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderInput = ({ input, label, meta, placeholder }) => {\r\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} placeholder={placeholder} />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderRadio = ({ input, meta, description, type, ...rest }) => {\r\n    return (\r\n      <div className=\"field\">\r\n        <input\r\n          type={type}\r\n          {...input}\r\n          className=\"hidden\"\r\n          checked={input.value === rest.value}\r\n        />\r\n        <label>{description}</label>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  birthDateMasking = (val, prevVal) => {\r\n    // Prevent non-digit characters being entered\r\n    if (isNaN(parseInt(val[val.length - 1], 10))) {\r\n      return val.slice(0, -1);\r\n    }\r\n\r\n    // When user is deleting, this prevents immediate re-addition of '/' when it's deleted\r\n    if (prevVal && prevVal.length >= val.length) {\r\n      return val;\r\n    }\r\n\r\n    // Add / at appropriate sections of the input\r\n    if (val.length === 2 || val.length === 5) {\r\n      val += \"/\";\r\n    }\r\n\r\n    // Prevent characters being entered after Dob is full\r\n    if (val.length >= 10) {\r\n      return val.slice(0, 10);\r\n    }\r\n\r\n    return val;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"ui form error\" autoComplete=\"off\">\r\n        <Field\r\n          name=\"firstName\"\r\n          component={this.renderInput}\r\n          label=\"First Name\"\r\n          placeholder=\"First Name\"\r\n        />\r\n        <Field\r\n          name=\"middleName\"\r\n          component={this.renderInput}\r\n          label=\"Middle Name\"\r\n          placeholder=\"Middle Name\"\r\n        />\r\n        <Field\r\n          name=\"lastName\"\r\n          component={this.renderInput}\r\n          label=\"Last Name\"\r\n          placeholder=\"Last Name\"\r\n        />\r\n\r\n        <div className=\"two fields\">\r\n          <div className=\"eleven wide field\">\r\n            <Field\r\n              name=\"birthDate\"\r\n              component={this.renderInput}\r\n              label=\"Birth Date\"\r\n              placeholder=\"MM/DD/YYYY\"\r\n              normalize={this.birthDateMasking}\r\n            />\r\n          </div>\r\n          <div className=\"five wide field\">\r\n            <Field\r\n              name=\"tin\"\r\n              component={this.renderInput}\r\n              label=\"TIN\"\r\n              placeholder=\"TIN\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"inline fields\">\r\n          <label>Employmee Type:</label>\r\n          <Field name=\"employeeType\" component=\"input\" type=\"radio\" value=\"1\" />\r\n          <label>Contractual</label>\r\n          <Field name=\"employeeType\" component=\"input\" type=\"radio\" value=\"1\" />\r\n          <label>Regular</label>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  if (!formValues.firstName) {\r\n    errors.firstName = \"You must enter a first name\";\r\n  }\r\n\r\n  if (!formValues.lastName) {\r\n    errors.lastName = \"You must enter a last name\";\r\n  }\r\n\r\n  if (!formValues.middleName) {\r\n    errors.middleName = \"You must enter a middle name\";\r\n  }\r\n\r\n  const validDate =\r\n    formValues.birthDate instanceof Date &&\r\n    !isNaN(formValues.birthDate.valueOf());\r\n\r\n  if (validDate) {\r\n    if (new Date(formValues.birthDate) > new Date()) {\r\n      errors.birthDate = \"Birth date cannot be future dated\";\r\n    }\r\n  } else {\r\n    errors.birthDate = \"You must enter a valid date\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n  form: \"EmployeeAdd\",\r\n  validate,\r\n})(EmployeeAdd);\r\n"]},"metadata":{},"sourceType":"module"}