{"ast":null,"code":"export function birthDateMasking(val, prevVal) {\n  // Prevent non-digit characters being entered\n  if (isNaN(parseInt(val[val.length - 1], 10))) {\n    return val.slice(0, -1);\n  } // When user is deleting, this prevents immediate re-addition of '/' when it's deleted\n\n\n  if (prevVal && prevVal.length >= val.length) {\n    return val;\n  } // Add / at appropriate sections of the input\n\n\n  if (val.length === 2 || val.length === 5) {\n    val += \"/\";\n  } // Prevent characters being entered after Dob is full\n\n\n  if (val.length >= 10) {\n    return val.slice(0, 10);\n  }\n\n  return val;\n}\nexport function formatAmount(value) {\n  if (!value) return \"\";\n  const cleanedInput = value.replace(/,/g, \"\").replace(/PHP /g, \"\");\n  if (cleanedInput.length === 0) return \"\";\n\n  if (isNaN(parseInt(value[value.length - 1], 10))) {\n    return this.formatAmount(value.slice(0, -1));\n  }\n\n  const convertedInput = \"PHP \" + new Intl.NumberFormat().format(cleanedInput);\n  return convertedInput;\n}\nexport function normalizeAmount(value) {\n  return value.replace(/,/g, \"\").replace(/PHP /g, \"\");\n}\nexport function validateDecimal(value) {\n  if (!isNaN(parseFloat(value)) && isFinite(value)) {\n    return true;\n  }\n}\nexport function countDecimals(value) {\n  console.log(value);\n  if (value % 1 === 0) return 0;\n\n  if (Math.floor(value) !== value) {\n    return value.toString().split(\".\")[1].length || 0;\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["C:/Projects/ReactJS/salary-calc/salary-calc-client/src/validations/validations.js"],"names":["birthDateMasking","val","prevVal","isNaN","parseInt","length","slice","formatAmount","value","cleanedInput","replace","convertedInput","Intl","NumberFormat","format","normalizeAmount","validateDecimal","parseFloat","isFinite","countDecimals","console","log","Math","floor","toString","split"],"mappings":"AAAA,OAAO,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,OAA/B,EAAwC;AAC7C;AACA,MAAIC,KAAK,CAACC,QAAQ,CAACH,GAAG,CAACA,GAAG,CAACI,MAAJ,GAAa,CAAd,CAAJ,EAAsB,EAAtB,CAAT,CAAT,EAA8C;AAC5C,WAAOJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAP;AACD,GAJ4C,CAM7C;;;AACA,MAAIJ,OAAO,IAAIA,OAAO,CAACG,MAAR,IAAkBJ,GAAG,CAACI,MAArC,EAA6C;AAC3C,WAAOJ,GAAP;AACD,GAT4C,CAW7C;;;AACA,MAAIA,GAAG,CAACI,MAAJ,KAAe,CAAf,IAAoBJ,GAAG,CAACI,MAAJ,KAAe,CAAvC,EAA0C;AACxCJ,IAAAA,GAAG,IAAI,GAAP;AACD,GAd4C,CAgB7C;;;AACA,MAAIA,GAAG,CAACI,MAAJ,IAAc,EAAlB,EAAsB;AACpB,WAAOJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAP;AACD;;AAED,SAAOL,GAAP;AACD;AAED,OAAO,SAASM,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,MAAI,CAACA,KAAL,EAAY,OAAO,EAAP;AAEZ,QAAMC,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAc,IAAd,EAAoB,EAApB,EAAwBA,OAAxB,CAAgC,OAAhC,EAAyC,EAAzC,CAArB;AAEA,MAAID,YAAY,CAACJ,MAAb,KAAwB,CAA5B,EAA+B,OAAO,EAAP;;AAE/B,MAAIF,KAAK,CAACC,QAAQ,CAACI,KAAK,CAACA,KAAK,CAACH,MAAN,GAAe,CAAhB,CAAN,EAA0B,EAA1B,CAAT,CAAT,EAAkD;AAChD,WAAO,KAAKE,YAAL,CAAkBC,KAAK,CAACF,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAlB,CAAP;AACD;;AAED,QAAMK,cAAc,GAAG,SAAS,IAAIC,IAAI,CAACC,YAAT,GAAwBC,MAAxB,CAA+BL,YAA/B,CAAhC;AAEA,SAAOE,cAAP;AACD;AAED,OAAO,SAASI,eAAT,CAAyBP,KAAzB,EAAgC;AACrC,SAAOA,KAAK,CAACE,OAAN,CAAc,IAAd,EAAoB,EAApB,EAAwBA,OAAxB,CAAgC,OAAhC,EAAyC,EAAzC,CAAP;AACD;AAED,OAAO,SAASM,eAAT,CAAyBR,KAAzB,EAAgC;AACrC,MAAI,CAACL,KAAK,CAACc,UAAU,CAACT,KAAD,CAAX,CAAN,IAA6BU,QAAQ,CAACV,KAAD,CAAzC,EAAkD;AAChD,WAAO,IAAP;AACD;AACF;AAED,OAAO,SAASW,aAAT,CAAuBX,KAAvB,EAA8B;AACnCY,EAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACA,MAAIA,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB,OAAO,CAAP;;AACrB,MAAIc,IAAI,CAACC,KAAL,CAAWf,KAAX,MAAsBA,KAA1B,EAAiC;AAC/B,WAAOA,KAAK,CAACgB,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,EAA+BpB,MAA/B,IAAyC,CAAhD;AACD;;AAED,SAAO,CAAP;AACD","sourcesContent":["export function birthDateMasking(val, prevVal) {\r\n  // Prevent non-digit characters being entered\r\n  if (isNaN(parseInt(val[val.length - 1], 10))) {\r\n    return val.slice(0, -1);\r\n  }\r\n\r\n  // When user is deleting, this prevents immediate re-addition of '/' when it's deleted\r\n  if (prevVal && prevVal.length >= val.length) {\r\n    return val;\r\n  }\r\n\r\n  // Add / at appropriate sections of the input\r\n  if (val.length === 2 || val.length === 5) {\r\n    val += \"/\";\r\n  }\r\n\r\n  // Prevent characters being entered after Dob is full\r\n  if (val.length >= 10) {\r\n    return val.slice(0, 10);\r\n  }\r\n\r\n  return val;\r\n}\r\n\r\nexport function formatAmount(value) {\r\n  if (!value) return \"\";\r\n\r\n  const cleanedInput = value.replace(/,/g, \"\").replace(/PHP /g, \"\");\r\n\r\n  if (cleanedInput.length === 0) return \"\";\r\n\r\n  if (isNaN(parseInt(value[value.length - 1], 10))) {\r\n    return this.formatAmount(value.slice(0, -1));\r\n  }\r\n\r\n  const convertedInput = \"PHP \" + new Intl.NumberFormat().format(cleanedInput);\r\n\r\n  return convertedInput;\r\n}\r\n\r\nexport function normalizeAmount(value) {\r\n  return value.replace(/,/g, \"\").replace(/PHP /g, \"\");\r\n}\r\n\r\nexport function validateDecimal(value) {\r\n  if (!isNaN(parseFloat(value)) && isFinite(value)) {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function countDecimals(value) {\r\n  console.log(value);\r\n  if (value % 1 === 0) return 0;\r\n  if (Math.floor(value) !== value) {\r\n    return value.toString().split(\".\")[1].length || 0;\r\n  }\r\n\r\n  return 0;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}